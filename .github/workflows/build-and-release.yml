name: Build and Release

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Test job for PRs
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Build application (compile only)
      run: npm run compile

  # Auto-tag and release job (only on master push)
  release:
    strategy:
      matrix:
        include:
          - os: macos-latest
            build_script: npm run build:mac
            name: macOS
          - os: windows-latest
            build_script: npm run build:win
            name: Windows
          - os: ubuntu-latest
            build_script: npm run build:linux
            name: Linux

    runs-on: ${{ matrix.os }}
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install macOS-specific dependencies
      if: matrix.os == 'macos-latest'
      run: npm install --no-save dmg-license

    - name: Run linter
      run: npm run lint

    - name: Get package version
      id: package-version
      shell: bash
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    - name: Create and push tag (macOS only)
      if: matrix.os == 'macos-latest'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ steps.package-version.outputs.version }}" -m "Release v${{ steps.package-version.outputs.version }}"
        git push origin "v${{ steps.package-version.outputs.version }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build for ${{ matrix.name }}
      run: ${{ matrix.build_script }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.name }}
        path: |
          dist/*.dmg
          dist/*.exe
          dist/*.AppImage
          dist/*.deb
          dist/*.rpm
          dist/*.zip
        retention-days: 1

  # Create release after all builds complete
  create-release:
    needs: release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get package version
      id: package-version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ steps.package-version.outputs.version }}"
        files: |
          artifacts/**/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(steps.package-version.outputs.version, 'beta') || contains(steps.package-version.outputs.version, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
